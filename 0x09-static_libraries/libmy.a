!<arch>
0-isupper.o/    0           0     0     644     203       `
#include <ctype.h>
/**
 * _isupper - check if a character is uppercase
 * @c: The character to check
 * Return: 0 or 1
 */
int _isupper(int c)
{
	if (isupper(c) != 0)
		return (1);
	else
		return (0);
}

0-memset.o/     0           0     0     644     283       `
#include "main.h"
/**
 * *_memset - fills memory with a constant byte
 * @s: pointer s
 * @b: a constant byte
 * @n: number of bytes
 * Return: a pointer
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.o/     0           0     0     644     346       `
/**
 * *_strcat - concatenate two strings
 * @dest: first string
 * @src: second string
 * Return: A pointer to the resulting string
 */
char *_strcat(char *dest, char *src)
{
	int i, j, k = 0;

	for (i = 0; *(dest + i); i++)
		;
	for (j = i; *(src + k); j++)
	{
		*(dest + j) = *(src + k);
		k++;
	}
	*(dest + (j + 1)) = '\0';
	return (dest);
}
1-isdigit.o/    0           0     0     644     201       `
#include <ctype.h>
/**
 * _isdigit - check if a character is a digit
 * @c: The character to check
 * Return: 0 or 1
 */
int _isdigit(int c)
{
	if (isdigit(c) != 0)
		return (1);
	else
		return (0);
}

1-memcpy.o/     0           0     0     644     297       `
#include "main.h"
/**
 * *_memcpy - copy memory data
 * @dest: pointer destimation
 * @src: pointer source
 * @n: number of bytes
 * Return: a pointer
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.o/    0           0     0     644     396       `
/**
 * *_strncat - concatenate two strings
 * @dest: first string
 * @src: second string
 * @n: numbers of bytes
 * Return: A pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j, k = 0;

	for (i = 0; *(dest + i); i++)
		;
	for (j = i; k < n && *(src + k) != '\0'; j++)
	{
		*(dest + j) = *(src + k);
		k++;
	}
	*(dest + (j + 1)) = '\0';
	return (dest);
}
100-atoi.o/     0           0     0     644     195       `
#include <stdio.h>
#include <stdlib.h>
/**
 * _atoi - convert a string to an integer
 * @s: the pointer to the string
 * Return: the converted value
 */
int _atoi(char *s)
{
	return (atoi(s));
}

2-strchr.o/     0           0     0     644     312       `
#include "main.h"
#include <stddef.h>
/**
 * *_strchr - locates a character in a string
 * @s: pointer s
 * @c: a character
 * Return: a pointer
 */
char *_strchr(char *s, char c)
{
	int i, l;

	for (l = 0; s[l]; l++)
		;
	for (i = 0; i <= l + 1; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (NULL);
}
2-strlen.o/     0           0     0     644     205       `
#include "main.h"
/**
 * _strlen - return a length of a string
 * @s: pointer to the string
 * Return: an integer
 */
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}

2-strncpy.o/    0           0     0     644     368       `
#include <stdio.h>
/**
 * *_strncpy - copy a string
 * @dest: the pointer to dest
 * @str: the pointer to the string
 * @n: the number of bytes
 * Return: the dest pointer
 */
char *_strncpy(char *dest, char *str, int n)
{
	int i;

	for (i = 0; i < n && *(str + i) != '\0'; i++)
		*(dest + i) = *(str + i);
	for (; i < n; i++)
		*(dest + i) = '\0';

	return (dest);
}
3-islower.o/    0           0     0     644     203       `
#include <ctype.h>
/**
 * _islower - check if a character is lowercase
 * @c: The character to check
 * Return: 0 or 1
 */
int _islower(int c)
{
	if (islower(c) != 0)
		return (1);
	else
		return (0);
}

3-puts.o/       0           0     0     644     248       `
#include "main.h"
/**
 * _puts - prints a string followed by a new line to stdut
 * @s: pointer to the string
 * Return: Nothing
 */
void _puts(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
	{
		_putchar(*(s + i));
		i++;
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     254       `
/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: integer
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0, val = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		val += s1[i] - s2[i];
		i++;
	}
	return (val);
}
3-strspn.o/     0           0     0     644     404       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring
 * @s: pointer s
 * @accept: a pointer
 * Return: an unsigned integer
 */
unsigned int _strspn(char *s, char *accept)
{
	int j, k;
	unsigned int nb = 0;

	for (j = 0; (s[j] >= 'a' && s[j] <= 'z')
	|| (s[j] >= 'A' && s[j] <= 'Z'); j++)
	{
		for (k = 0; accept[k]; k++)
		{
			if (s[j] == accept[k])
				nb++;
		}
	}
	return (nb);
}
4-isalpha.o/    0           0     0     644     198       `
#include <ctype.h>
/**
 * _isalpha - check if a character is alpha
 * @c: The character to check
 *Return: 0 or 1
 */
int _isalpha(int c)
{
	if (isalpha(c) != 0)
		return (1);
	else
		return (0);
}
4-strpbrk.o/    0           0     0     644     349       `
#include "main.h"
#include <stddef.h>
/**
 * *_strpbrk - searches a string for any of a set of bytes
 * @s: pointer s
 * @accept: a pointer
 * Return: a pointer
 */
char *_strpbrk(char *s, char *accept)
{
	int j, k;

	for (j = 0; s[j]; j++)
	{
		for (k = 0; accept[k]; k++)
		{
			if (s[j] == accept[k])
				return (&s[j]);
		}
	}
	return (NULL);
}

5-strstr.o/     0           0     0     644     611       `
#include "main.h"
#include <stddef.h>
/**
 * *_strstr - locates a substring
 * @haystack: pointer s
 * @needle: a pointer
 * Return: a pointer
 */
char *_strstr(char *haystack, char *needle)
{
	int j = 0, k = 0, start = 0, nlen;

	for (nlen = 0; needle[nlen]; nlen++)
		;
	if (nlen == 0)
		return (haystack);
	for (j = 0; haystack[j]; j++)
	{
		if (needle[0] == haystack[j])
		{
			start = j;
			j++;
			for (k = 1; needle[k] && haystack[j]; k++)
			{
				if (needle[k] != haystack[j])
					break;
				else if (k == nlen - 1)
					return (&haystack[start]);
				j++;
			}
			j = start;
		}
	}
	return (NULL);
}

6-abs.o/        0           0     0     644     167       `
#include "stdlib.h"
/**
 * _abs - compute an absolute value of a number
 *@n: a number to compute
 *Return: absolute number
 */

int _abs(int n)
{
	return (abs(n));
}

9-strcpy.o/     0           0     0     644     294       `
#include <stdio.h>
/**
 * *_strcpy - copy a string
 * @dest: the pointer to dest
 * @str: the pointer to the string
 * Return: the dest pointer
 */
char *_strcpy(char *dest, char *str)
{
	int i;

	for (i = 0; *(str + i); i++)
		*(dest + i) = *(str + i);
	*(dest + i) = '\0';

	return (dest);
}
_putchar.o/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

